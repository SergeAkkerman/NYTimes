{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveDisplayValue = toHaveDisplayValue;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(`.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`);\n  }\n\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = getNumberOfMatchesBetweenArrays(values, expectedValues);\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () => (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)\n  };\n}\n\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];\n}\n\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}\n\nfunction getNumberOfMatchesBetweenArrays(arrayBase, array) {\n  return array.filter(expected => arrayBase.filter(value => (0, _utils.matches)(value, expected)).length).length;\n}","map":{"version":3,"sources":["/Users/sergey/Desktop/LinkUp_React_Test/my-app/node_modules/@testing-library/jest-dom/dist/to-have-display-value.js"],"names":["Object","defineProperty","exports","value","toHaveDisplayValue","_utils","require","htmlElement","expectedValue","checkHtmlElement","tagName","toLowerCase","includes","Error","type","values","getValues","expectedValues","getExpectedValues","numberOfMatchesWithValues","getNumberOfMatchesBetweenArrays","matchedWithAllValues","length","matchedWithAllExpectedValues","pass","message","getMessage","utils","matcherHint","isNot","Array","from","filter","option","selected","map","textContent","arrayBase","array","expected","matches"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,kBAAT,CAA4BG,WAA5B,EAAyCC,aAAzC,EAAwD;AACtD,GAAC,GAAGH,MAAM,CAACI,gBAAX,EAA6BF,WAA7B,EAA0CH,kBAA1C,EAA8D,IAA9D;AACA,QAAMM,OAAO,GAAGH,WAAW,CAACG,OAAZ,CAAoBC,WAApB,EAAhB;;AAEA,MAAI,CAAC,CAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,EAAgCC,QAAhC,CAAyCF,OAAzC,CAAL,EAAwD;AACtD,UAAM,IAAIG,KAAJ,CAAU,qHAAV,CAAN;AACD;;AAED,MAAIH,OAAO,KAAK,OAAZ,IAAuB,CAAC,OAAD,EAAU,UAAV,EAAsBE,QAAtB,CAA+BL,WAAW,CAACO,IAA3C,CAA3B,EAA6E;AAC3E,UAAM,IAAID,KAAJ,CAAW,gEAA+DN,WAAW,CAACO,IAAK,uCAA3F,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGC,SAAS,CAACN,OAAD,EAAUH,WAAV,CAAxB;AACA,QAAMU,cAAc,GAAGC,iBAAiB,CAACV,aAAD,CAAxC;AACA,QAAMW,yBAAyB,GAAGC,+BAA+B,CAACL,MAAD,EAASE,cAAT,CAAjE;AACA,QAAMI,oBAAoB,GAAGF,yBAAyB,KAAKJ,MAAM,CAACO,MAAlE;AACA,QAAMC,4BAA4B,GAAGJ,yBAAyB,KAAKF,cAAc,CAACK,MAAlF;AACA,SAAO;AACLE,IAAAA,IAAI,EAAEH,oBAAoB,IAAIE,4BADzB;AAELE,IAAAA,OAAO,EAAE,MAAM,CAAC,GAAGpB,MAAM,CAACqB,UAAX,EAAuB,IAAvB,EAA6B,KAAKC,KAAL,CAAWC,WAAX,CAAwB,GAAE,KAAKC,KAAL,GAAa,MAAb,GAAsB,EAAG,qBAAnD,EAAyE,SAAzE,EAAoF,EAApF,CAA7B,EAAuH,oBAAmB,KAAKA,KAAL,GAAa,MAAb,GAAsB,EAAG,uBAAnK,EAA2LrB,aAA3L,EAA0M,UAA1M,EAAsNO,MAAtN;AAFV,GAAP;AAID;;AAED,SAASC,SAAT,CAAmBN,OAAnB,EAA4BH,WAA5B,EAAyC;AACvC,SAAOG,OAAO,KAAK,QAAZ,GAAuBoB,KAAK,CAACC,IAAN,CAAWxB,WAAX,EAAwByB,MAAxB,CAA+BC,MAAM,IAAIA,MAAM,CAACC,QAAhD,EAA0DC,GAA1D,CAA8DF,MAAM,IAAIA,MAAM,CAACG,WAA/E,CAAvB,GAAqH,CAAC7B,WAAW,CAACJ,KAAb,CAA5H;AACD;;AAED,SAASe,iBAAT,CAA2BV,aAA3B,EAA0C;AACxC,SAAOA,aAAa,YAAYsB,KAAzB,GAAiCtB,aAAjC,GAAiD,CAACA,aAAD,CAAxD;AACD;;AAED,SAASY,+BAAT,CAAyCiB,SAAzC,EAAoDC,KAApD,EAA2D;AACzD,SAAOA,KAAK,CAACN,MAAN,CAAaO,QAAQ,IAAIF,SAAS,CAACL,MAAV,CAAiB7B,KAAK,IAAI,CAAC,GAAGE,MAAM,CAACmC,OAAX,EAAoBrC,KAApB,EAA2BoC,QAA3B,CAA1B,EAAgEjB,MAAzF,EAAiGA,MAAxG;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveDisplayValue = toHaveDisplayValue;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(`.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`);\n  }\n\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = getNumberOfMatchesBetweenArrays(values, expectedValues);\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () => (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)\n  };\n}\n\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];\n}\n\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}\n\nfunction getNumberOfMatchesBetweenArrays(arrayBase, array) {\n  return array.filter(expected => arrayBase.filter(value => (0, _utils.matches)(value, expected)).length).length;\n}"]},"metadata":{},"sourceType":"script"}